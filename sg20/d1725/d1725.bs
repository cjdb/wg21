<pre class='metadata'>
Title: Modular Topic Design
Shortname: D1725
Level: 0
Status: D
Group: wg21
Editor: Christopher Di Bella, cjdb.ns@gmail.com
URL: https://wg21.link/p1725
Abstract: SG20 advised that [[P1389R0]] should move away from a linear stage-based model into a more modular topic-based model. This proposal aims to start the discussion for evaluating the the class of modules that are suitable for curriculum guidelines.
Audience: SG20
Markup Shorthands: markdown yes
Default Highlight: CPP
Line Numbers: no
Date: 2019-06-17
</pre>

# Motivation

It was noted in the SG20 Kona face-to-face that learning is an iterative process, requring
malleability, and that the stages outlined in P1389 were too rigid and linear; this might be too
restrictive on curriculum design as a result. This proposal sets out to ask SG20 to discuss the
ideas behind a set of topic 'modules' where stages are embedded into a module. The benefit of the
guidelines having sets of topics as opposed to sets of stages is that teachers will be able to
formulate their own curricula more easily.

P1389R0 stated that a student should be able to meet all of the objectives and satisfy all of
the outcomes in Stage 1 before they are ready to progress to Stage 2, and so on. This means that
there are some unrelated topics that are coupled together. In hindsight, the author of P1389 also
acknowledges that the sets of stages is closer to a prescibed curriculum than intended. For example,
some of P1389's Stage 1 has algorithms, basic I/O, computation constructs, containers, contracts,
and designing and using classes. None of these topics are strictly related, but Stage 2 is
completely blocked until all the topics in Stage 1 are exhausted. Since P1389 advises derived types
be introduced in Stage 2 -- and Stage 2 is blocked until Stage 1 is completed -- P1389 excludes the
possibility of a curriculum introducing derived types as a part of the class design topic, despite
it has no real dependency on basic I/O.

If P1389 or its successor were to advise modules of topics, where strict dependencies are outlined,
then this would make it possible for both curriculum designs in the previous paragraph to co-exist
and still conform to the recommendations outlined in the 'Standing Document for Teaching C++ to
C++ Novices with Programming Experience' (P1389's target). This will help shape the Standing
Documents that SG20 outputs, so that they are significantly less prescriptive, and satisfy the
advisory role outlined in the SG20 charter, as opposed to accidentally becoming a prescriptive
curriculum.

# Design goals

It should be noted that while P1725 suggests a handful of modules and topics that fall within those
modules, it is by no means an exhaustive list of either. Furthermore, P1725R0 does not make any
attempt to draw a dependency graph among the topics listed in each topic. The author is requesting
the help of SG20 to formulate an exhaustive list of modules and topics, as well as a strong
dependency graph that will help teachers structure their curricula.

These modules are designed to have their own assoicated objectives and outcomes. A curriculum's
objectives are essentially a contract between a student and the course. By the end of a course, a
student should have developed certain knowledge, understanding, and skills about particular topics.
These are assessable through course outcomes, which advise that a student should be able to do
something related with that knowledge, or related to that skill. For example, Table 1 outlines a few
objectives and outcomes from a hypothetical introductory C++ course.

<b>Note: Table 1 is an example set of objectives and outcomes for a particular hypothetical course
and is deliberately incomplete: P1725 is <i>not</i> proposing the contents of Table 1 be added to
any document published by SG20.</b>

<table>
  <tr>
    <td><b>Objective</b></td>
    <td><b>Outcome</b></td>
  </tr>
  <tr>
    <td>Students will develop</td>
    <td>A student</td>
  </tr>
  <tr>
    <td>1. knowledge and understanding about how software engineers build systems</td>
    <td><dl>
      <dt>P1.1</dt>
      <dd>
        chooses the correct data structures, algorithms, libraries, and tools for engineering
        software
      </dd>
      <dt>P1.2</dt>
      <dd>consults the most appropriate resources for building a system</dd>
    </dl></td>
  </tr>
  <tr>
    <td>2. knowledge and understanding about why testing is important for software development</td>
    <td><dl>
      <dt>P2.1</dt>
      <dd>designs unit-tests to validate that the individual components of their are correct</dd>
      <dt>P2.2</dt>
      <dd>
        designs integration-tests to validate that their individual components work together to
        provide the correct solution
      </dd>
    </dl></td>
  </tr>
  <tr>
    <td>3. knowledge and understanding about why benchmarking is important for software development</td>
    <td><dl>
      <dt>P3.1</dt>
      <dd>designs benchmarks to prove that one choice is "more efficient" than another</dd>
    </dl></td>
  </tr>
  <tr>
    <td>4. knowledge and understanding about software engineering tools</td>
    <td><dl>
      <dt>P4.1</dt>
      <dd>chooses the correct tools to help solve the problem</dd>
    </dl></td>
  </tr>
  <tr>
    <td>5. skills in the C++ programming language</td>
    <td><dl>
      <dt>P5.1</dt>
      <dd>wirtes programs that correctly solve the problem using C++</dd>
      <dt>P5.2</dt>
      <dd>writes programs that take advantage of modern C++ programming techniques</dd>
      <dt>P5.3</dt>
      <dd>reads and understands existing C++ code to understand the current state of a solution</dd>
      <dt>P5.4</dt>
      <dd>
        modifies or extends existing C++ code without the need for major rewrites to well-written
        code
      </dd>
    </dl></td>
  </tr>
</table>

# A non-exhausive list of modules

Table 2 outlines a non-exhaustive list of modules and their related topics. The modules are not
listed in a meaningful order; instead, they are listed so that the table is evenly formatted.

<table>
	<tr>
		<td>
			<b>C++ compilation model</b>
			<ul>
				<li>declarations</li>
				<li>definitions</li>
				<li>headers</li>
				<li>modules</li>
				<li>translation units</li>
			</ul>
		</td>
		<td>
			<b>Error handling</b>
			<ul>
				<li>contracts</li>
				<li>exception handling</li>
				<li>monadic programming</li>
			</ul>
		</td>
		<td>
			<b>I/O</b>
			<ul>
				<li>character I/O</li>
				<li>from-string conversions</li>
				<li>file I/O</li>
				<li>GUIs (using a third-party library)</li>
				<li>to-string conversions</li>
			</ul>
		</td>
	</tr>
	<tr>
		<td>
			<b>C++ object model</b>
			<ul>
				<li>copy semantics</li>
				<li>constant expressions</li>
				<li>constant objects</li>
				<li>constructors</li>
				<li>conversions</li>
				<li>destructors</li>
				<li>free store</li>
				<li>lambdas</li>
				<li>move semantics</li>
				<li>objects</li>
				<li>pass-by-value</li>
				<li>pass-by-reference</li>
				<li>pointers</li>
				<li>references</li>
				<li>references-to-<code>const</code></li>
				<li>reference semantics</li>
				<li>resources</li>
				<li>rule-of-five</li>
				<li>rule-of-zero</li>
				<li>scope</li>
				<li>smart pointers</li>
				<li>special member functions</li>
				<li>types</li>
				<li>values</li>
				<li>value semantics</li>
			</ul>
		</td>
		<td>
			<b>Functions</b>
			<ul>
				<li>calling functions</li>
				<li>contracts</li>
				<li>function templates</li>
				<li>lambdas</li>
				<li>member functions</li>
				<li>overloading</li>
				<li>parameters</li>
				<li>pass-by-value</li>
				<li>pass-by-reference</li>
				<li>returning multiple values</li>
				<li>return value optimisation</li>
				<li>user-defined literals</li>
				<li>virtual functions</li>
			</ul>
		</td>
		<td>
			<b>User-defined types</b>
			<ul>
				<li>access</li>
				<li>class templates</li>
				<li>constructors</li>
				<li>data members</li>
				<li>derived types</li>
				<li>destructors</li>
				<li>friends</li>
				<li>interface inheritance</li>
				<li>member functions</li>
				<li><code>optional</code> and <code>variant</code> as sum types</li>
				<li>rule-of-five</li>
				<li>rule-of-zero</li>
				<li>special member functions</li>
				<li>static members</li>
				<li><code>struct</code>s and <code>class</code>es as product types</li>
				<li>user-defined literals</li>
				<li>variable templates</li>
				<li>virtual functions</li>
			</ul>
		</td>
	</tr>
	<tr>
		<td>
			<b>Program design</b>
			<ul>
				<li>algorithms</li>
				<li>concepts</li>
				<li>containers</li>
				<li>contracts</li>
				<li>contributing to a pre-existing project</li>
				<li>error handling</li>
				<li>interface inheritance</li>
				<li>I/O design</li>
				<li>iterators</li>
				<li>ranges</li>
				<li>resource handling</li>
			</ul>
		</td>
		<td>
			<b>Type system</b>
			<ul>
				<li>conversions</li>
				<li>fundamental types</li>
				<li>function overloading</li>
				<li>scoped enumerations</li>
				<li>template type parameters</li>
				<li>user-defined types</li>
			</ul>
		</td>
		<td>
			<b>Tooling</b>
			<ul>
				<li>build system</li>
				<li>compiler</li>
				<li>continuous integration</li>
				<li>debugger</li>
				<li>formatter</li>
				<li>IDE</li>
				<li>libraries</li>
				<li>linter</li>
				<li>optimiser</li>
				<li>package manager</li>
				<li>test tools</li>
				<li>version control</li>
			</ul>
		</td>
	</tr>
	<tr>
		<td>
			<b>History of C++</b>
			<br />
			No topic suggestions at present.
		</td>
		<td>
			<b>Interop and ABI</b>
			<ul>
				<li>bindings for other languages</li>
				<li>C++ features on a binary level</li>
				<li>dynamic libraries</li>
				<li>hourglass interfaces</li>
				<li>interop with C</li>
				<li>writing ABI-stable libraries</li>
			</ul>
		</td>
		<td>
			<b>Undefined behaviour</b>
			<br />
			No topic suggestions at present.
		</td>
	</tr>
</table>

An astute reader should notice that there are a few topics that are mentioned in multiple modules.
This highlights that the above modules could perhaps be further refined <i>or</i> that certain
topics cannot be taught in isolation. Given that features of C++ are designed to work with one
another, the author believes that the latter case is more likely. The reader should also note that
both 'types' and 'user-defined types' have been listed as modules <i>and</i> topics within other
modules.

The author would like to propose that SG20 adopt the module/topic model -- even if it is in a
different form to what is outlined above -- and begin discussing the kinds of modules desired, the
topics underneath each module, the objectives for each module, and the relevant module outcomes
associated with each objective.

# Acknowledgements

The author would like to thank JC van Winkel for his direct feedback on this proposal, as well as
the members of SG20 who provided feedback on P1389R0's structure.


<pre class=biblio>
{
"P1389R0": {
   "title": "Standing Document for SG20: Guidelines for Teaching C++ to Beginners",
   "authors": "Christopher Di Bella, Simon Brand, Michael Adams",
   "href": "https://wg21.link/p1389r0"
}
}
</pre>
